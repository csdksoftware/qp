package qp

import (
	"bytes"
	"io"
	"reflect"
	"testing"
)

type codec interface {
	EncodedLength() int
	Encode(w io.Writer) error
	Decode(r io.Reader) error
}

// Test if the types live up to their interface
var (
	_ codec   = (*Qid)(nil)
	_ codec   = (*Stat)(nil)
	_ Message = (*VersionRequest)(nil)
	_ Message = (*VersionResponse)(nil)
	_ Message = (*AuthRequest)(nil)
	_ Message = (*AuthResponse)(nil)
	_ Message = (*AttachRequest)(nil)
	_ Message = (*AttachResponse)(nil)
	_ Message = (*ErrorResponse)(nil)
	_ Message = (*FlushRequest)(nil)
	_ Message = (*FlushResponse)(nil)
	_ Message = (*WalkRequest)(nil)
	_ Message = (*WalkResponse)(nil)
	_ Message = (*OpenRequest)(nil)
	_ Message = (*OpenResponse)(nil)
	_ Message = (*CreateRequest)(nil)
	_ Message = (*CreateResponse)(nil)
	_ Message = (*ReadRequest)(nil)
	_ Message = (*ReadResponse)(nil)
	_ Message = (*WriteRequest)(nil)
	_ Message = (*WriteResponse)(nil)
	_ Message = (*ClunkRequest)(nil)
	_ Message = (*ClunkResponse)(nil)
	_ Message = (*RemoveRequest)(nil)
	_ Message = (*RemoveResponse)(nil)
	_ Message = (*StatRequest)(nil)
	_ Message = (*StatResponse)(nil)
	_ Message = (*WriteStatRequest)(nil)
	_ Message = (*WriteStatResponse)(nil)
)

var tests = []struct {
	in        codec
	reference []byte
}{
	{
		&Qid{
			Type:    QTDIR,
			Version: 0x12340987,
			Path:    0x10293874FFFFFF,
		},
		[]byte{0x80, 0x87, 0x9, 0x34, 0x12, 0xff, 0xff, 0xff, 0x74, 0x38, 0x29, 0x10, 0x0},
	}, {
		&Stat{
			Type:   0xDEAD,
			Dev:    0xABCDEF08,
			Qid:    Qid{},
			Mode:   FileMode(OTRUNC),
			Atime:  90870987,
			Mtime:  1234124,
			Length: 0x23ABDDF8,
			Name:   "hello",
			UID:    "someone",
			GID:    "over the",
			MUID:   "rainbow",
		},
		[]byte{0x4a, 0x0, 0xad, 0xde, 0x8, 0xef, 0xcd, 0xab, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0xcb, 0x94, 0x6a, 0x5, 0xcc, 0xd4, 0x12, 0x0, 0xf8, 0xdd, 0xab, 0x23, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x7, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x8, 0x0, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x7, 0x0, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77},
	}, {
		&VersionRequest{
			Tag:     45,
			MaxSize: 9384,
			Version: "9P2000",
		},
		[]byte{0x13, 0x0, 0x0, 0x0, 0x64, 0x2d, 0x0, 0xa8, 0x24, 0x0, 0x0, 0x6, 0x0, 0x39, 0x50, 0x32, 0x30, 0x30, 0x30},
	}, {
		&VersionResponse{
			Tag:     45,
			MaxSize: 9384,
			Version: "9P2000",
		},
		[]byte{0x13, 0x0, 0x0, 0x0, 0x65, 0x2d, 0x0, 0xa8, 0x24, 0x0, 0x0, 0x6, 0x0, 0x39, 0x50, 0x32, 0x30, 0x30, 0x30},
	}, {
		&AuthRequest{
			Tag:      45,
			AuthFid:  Fid(1234),
			Username: "someone",
			Service:  "something",
		},
		[]byte{0x1f, 0x0, 0x0, 0x0, 0x66, 0x2d, 0x0, 0xd2, 0x4, 0x0, 0x0, 0x7, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x9, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67},
	}, {
		&AuthResponse{
			Tag:     45,
			AuthQid: Qid{},
		},
		[]byte{0x14, 0x0, 0x0, 0x0, 0x67, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}, {
		&AttachRequest{
			Tag:      45,
			Fid:      35243,
			AuthFid:  90872354,
			Username: "",
			Service:  "weee",
		},
		[]byte{0x17, 0x0, 0x0, 0x0, 0x68, 0x2d, 0x0, 0xab, 0x89, 0x0, 0x0, 0x22, 0x9a, 0x6a, 0x5, 0x0, 0x0, 0x4, 0x0, 0x77, 0x65, 0x65, 0x65},
	}, {
		&AttachResponse{
			Tag: 45,
			Qid: Qid{},
		},
		[]byte{0x14, 0x0, 0x0, 0x0, 0x69, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}, {
		&ErrorResponse{
			Tag:   45,
			Error: "something something something",
		},
		[]byte{0x26, 0x0, 0x0, 0x0, 0x6b, 0x2d, 0x0, 0x1d, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67},
	}, {
		&FlushRequest{
			Tag:    45,
			OldTag: 23453,
		},
		[]byte{0x9, 0x0, 0x0, 0x0, 0x6c, 0x2d, 0x0, 0x9d, 0x5b},
	}, {
		&FlushResponse{
			Tag: 45,
		},
		[]byte{0x7, 0x0, 0x0, 0x0, 0x6d, 0x2d, 0x0},
	}, {
		&WalkRequest{
			Tag:    45,
			Fid:    1234,
			NewFid: 3452345,
			Names: []string{
				"ongo",
				"bongo",
				"filliyonko",
				"megatronko",
			},
		},
		[]byte{0x36, 0x0, 0x0, 0x0, 0x6e, 0x2d, 0x0, 0xd2, 0x4, 0x0, 0x0, 0xb9, 0xad, 0x34, 0x0, 0x4, 0x0, 0x4, 0x0, 0x6f, 0x6e, 0x67, 0x6f, 0x5, 0x0, 0x62, 0x6f, 0x6e, 0x67, 0x6f, 0xa, 0x0, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x79, 0x6f, 0x6e, 0x6b, 0x6f, 0xa, 0x0, 0x6d, 0x65, 0x67, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x6b, 0x6f},
	}, {
		&WalkResponse{
			Tag: 45,
			Qids: []Qid{
				{},
				{},
				{},
			},
		},
		[]byte{0x30, 0x0, 0x0, 0x0, 0x6f, 0x2d, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}, {
		&OpenRequest{
			Tag:  45,
			Fid:  21343,
			Mode: 4,
		},
		[]byte{0xc, 0x0, 0x0, 0x0, 0x70, 0x2d, 0x0, 0x5f, 0x53, 0x0, 0x0, 0x4},
	}, {
		&OpenResponse{
			Tag:    45,
			Qid:    Qid{},
			IOUnit: 1234123,
		},
		[]byte{0x18, 0x0, 0x0, 0x0, 0x71, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcb, 0xd4, 0x12, 0x0},
	}, {
		&CreateRequest{
			Tag:         45,
			Fid:         12343,
			Name:        "wakakaaka",
			Permissions: DMDIR,
			Mode:        4,
		},
		[]byte{0x1b, 0x0, 0x0, 0x0, 0x72, 0x2d, 0x0, 0x37, 0x30, 0x0, 0x0, 0x9, 0x0, 0x77, 0x61, 0x6b, 0x61, 0x6b, 0x61, 0x61, 0x6b, 0x61, 0x0, 0x0, 0x0, 0x80, 0x4},
	}, {
		&CreateResponse{
			Tag:    45,
			Qid:    Qid{},
			IOUnit: 433535,
		},
		[]byte{0x18, 0x0, 0x0, 0x0, 0x73, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x9d, 0x6, 0x0},
	}, {
		&ReadRequest{
			Tag:    45,
			Fid:    5343,
			Offset: 359842382234,
			Count:  23423,
		},
		[]byte{0x17, 0x0, 0x0, 0x0, 0x74, 0x2d, 0x0, 0xdf, 0x14, 0x0, 0x0, 0x9a, 0x1, 0x47, 0xc8, 0x53, 0x0, 0x0, 0x0, 0x7f, 0x5b, 0x0, 0x0},
	}, {
		&ReadResponse{
			Tag:  45,
			Data: []byte("ooooh nooo it's full of data"),
		},
		[]byte{0x27, 0x0, 0x0, 0x0, 0x75, 0x2d, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x6f, 0x6f, 0x6f, 0x6f, 0x68, 0x20, 0x6e, 0x6f, 0x6f, 0x6f, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x74, 0x61},
	}, {
		&WriteRequest{
			Tag:    45,
			Fid:    254334,
			Offset: 21304978234,
			Data:   []byte("something to write"),
		},
		[]byte{0x29, 0x0, 0x0, 0x0, 0x76, 0x2d, 0x0, 0x7e, 0xe1, 0x3, 0x0, 0x3a, 0x2b, 0xe0, 0xf5, 0x4, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65},
	}, {
		&WriteResponse{
			Tag:   45,
			Count: 12,
		},
		[]byte{0xb, 0x0, 0x0, 0x0, 0x77, 0x2d, 0x0, 0xc, 0x0, 0x0, 0x0},
	}, {
		&ClunkRequest{
			Tag: 45,
			Fid: 23123,
		},
		[]byte{0xb, 0x0, 0x0, 0x0, 0x78, 0x2d, 0x0, 0x53, 0x5a, 0x0, 0x0},
	}, {
		&ClunkResponse{
			Tag: 45,
		},
		[]byte{0x7, 0x0, 0x0, 0x0, 0x79, 0x2d, 0x0},
	}, {
		&RemoveRequest{
			Tag: 45,
			Fid: 1234,
		},
		[]byte{0xb, 0x0, 0x0, 0x0, 0x7a, 0x2d, 0x0, 0xd2, 0x4, 0x0, 0x0},
	}, {
		&RemoveResponse{
			Tag: 45,
		},
		[]byte{0x7, 0x0, 0x0, 0x0, 0x7b, 0x2d, 0x0},
	}, {
		&StatRequest{
			Tag: 45,
			Fid: 12341234,
		},
		[]byte{0xb, 0x0, 0x0, 0x0, 0x7c, 0x2d, 0x0, 0xf2, 0x4f, 0xbc, 0x0},
	}, {
		&StatResponse{
			Tag:  45,
			Stat: Stat{},
		},
		[]byte{0x3a, 0x0, 0x0, 0x0, 0x7d, 0x2d, 0x0, 0x31, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}, {
		&WriteStatRequest{
			Tag:  45,
			Fid:  12342134,
			Stat: Stat{},
		},
		[]byte{0x3e, 0x0, 0x0, 0x0, 0x7e, 0x2d, 0x0, 0x76, 0x53, 0xbc, 0x0, 0x31, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
	}, {
		&WriteStatResponse{
			Tag: 45,
		},
		[]byte{0x7, 0x0, 0x0, 0x0, 0x7f, 0x2d, 0x0},
	},
}

func reencode(i int, in codec, reference []byte, t *testing.T, p Protocol) {
	var (
		buf   = new(bytes.Buffer)
		other codec
		err   error
	)

	// Retrieve input basic type
	inputType := reflect.ValueOf(in).Elem().Type()

	inm, isMessage := in.(Message)

	if isMessage {
		if err = p.Encode(buf, inm); err != nil {
			t.Errorf("test %d: encoding failed for %v: %v", i, inputType, err)
			return
		}
	} else {
		if err := in.Encode(buf); err != nil {
			t.Errorf("test %d: encoding failed for %v: %v", i, inputType, err)
			return
		}
	}

	if bytes.Compare(buf.Bytes(), reference) != 0 {
		t.Errorf("test %d: binary representation not equal to reference for %v:\n\tExpected: %v\n\tGot: %v", i, inputType, reference, buf.Bytes())
		return
	}

	if isMessage {
		other, err = p.Decode(buf)
		if err != nil {
			t.Errorf("test %d: decoding failed for %v: %v", i, inputType, err)
			return
		}
	} else {
		// Magic to construct a new codec of the input type
		other = reflect.New(inputType).Interface().(codec)
		if err := other.Decode(buf); err != nil {
			t.Errorf("test %d: decoding failed for %v: %v", i, inputType, err)
			return
		}
	}

	// Comparing the interfaces would result in pointer comparisons, so get the basic type first
	if !reflect.DeepEqual(reflect.ValueOf(in).Elem().Interface(), reflect.ValueOf(other).Elem().Interface()) {
		t.Errorf("test %d: %v did not reencode correctly", i, inputType)
	}
}

// This test does NOT guarantee proper 9P2000 spec coding, but ensures at least
// that all codecs are compatible with themselves.
func TestReencode(t *testing.T) {

	for i, tt := range tests {
		reencode(i, tt.in, tt.reference, t, NineP2000)
	}
}

func BenchmarkReencode(b *testing.B) {
	for n := 0; n < b.N; n++ {
		for i, tt := range tests {
			reencode(i, tt.in, tt.reference, nil, NineP2000)
		}
	}
}
